cluster-dispatcher {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 2
    parallelism-max = 4
  }
}

blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 32
  }
  throughput = 1
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "cluster"

    serialization-identifiers {
      "graalvm.demo.common.ScalaProtobufSerializer" = 10000
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
      bytes = "akka.serialization.ByteArraySerializer"
      akka-containers = "akka.remote.serialization.MessageContainerSerializer"
      akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
      scalapb = "graalvm.demo.common.ScalaProtobufSerializer"
    }

    serialization-bindings {
      "akka.actor.ActorSelectionMessage" = akka-containers
      "com.google.protobuf.GeneratedMessage" = proto
      "scalapb.GeneratedMessage" = scalapb
      "akka.cluster.ClusterMessage" = akka-cluster
      "java.io.Serializable" = java
      "[B" = bytes
    }

    default-dispatcher {
      throughput = 1
      fork-join-executor {
        parallelism-min = 10
        parallelism-max = 20
        parallelism-factor = 3.0
      }
    }
  }
  cluster {
  // pub-sub {
  //   # Actor name of the mediator actor, /system/distributedPubSubMediator
  //   # name = distributedPubSubMediator

  //   # Start the mediator on members tagged with this role.
  //   # All members are used if undefined or empty.
  //   role = ""

  //   # The routing logic to use for 'Send'
  //   # Possible values: random, round-robin, broadcast
  //   routing-logic = broadcast

  //   # How often the DistributedPubSubMediator should send out gossip information
  //   gossip-interval = 1s

  //   # Removed entries are pruned after this duration
  //   removed-time-to-live = 240s

  //   # Maximum number of elements to transfer in one message when synchronizing the registries.
  //   # Next chunk will be transferred in next round of gossip.
  //   max-delta-elements = 3000

  //   # The id of the dispatcher to use for DistributedPubSubMediator actors.
  //   # If not specified default dispatcher is used.
  //   # If specified you need to define the settings of the actual dispatcher.
  //   use-dispatcher = ""
  // }
    failure-detector.threshold = 12
    use-dispatcher = cluster-dispatcher
    //sharding {
    //  state-store-mode = ddata
    //}
  }
  //  cluster.metrics.enabled = off
  //  extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]
  // extensions = ["akka.cluster.pubsub.DistributedPubSub"]

  remote {
    maximum-payload-bytes = 100000000 bytes
    netty.tcp {
      port = 0
      message-frame-size =  100000000b
      send-buffer-size =  100000000b
      receive-buffer-size =  100000000b
      maximum-frame-size = 100000000b
    }

  }

  cluster {
    auto-down-unreachable-after = off
    shutdown-after-unsuccessful-join-seed-nodes = 30s
    failure-detector {
      acceptable-heartbeat-pause = 30 s
    }
  }
}

akka.coordinated-shutdown.exit-jvm = on
