include "common"
akka {
  extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]
  actor {
    default-dispatcher{
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8
        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 4.0
        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64
      }
      # Throughput defines the number of messages that are processed in a batch
      # before the thread is returned to the pool. Set to 1 for as fair as possible.
      throughput = 100
    }

    deployment {
      /metrics-listener/node-state-query-router {
        #router = consistent-hashing-group
        router = round-robin-group
        max-total-nr-of-instances = 10000
        #nr-of-cluster-node = 20
        routees.paths = ["/user/node-state-query"]
        cluster {
          enabled = on
          allow-local-routees = off
          use-roles = ["manager"]
        }
      }
    }
  }
  remote {
    netty.tcp {
      hostname = "127.0.0.1"
      port = 8101
    }
  }

  discovery {
    method = aggregate
    aggregate {
      // Try and resolve via DNS and fall back to configuration
      discovery-methods = ["akka-dns", "config"]
    }
    config {
      services {
        Demo-Cluster {
          endpoints = [
            {
              //Manager
              host = "127.0.0.1"
              port = 5101
            }
          ]
        }
      }
    }
  }

  management {
    cluster.bootstrap {
      // Use after initial deployment
      new-cluster-enabled = off
      contact-point-discovery {
        service-name = "Demo-Cluster"
        discovery-method = config
        interval = 2s
        required-contact-point-nr = 1
      }
    }
    http {
      hostname = "127.0.0.1"
      port = 6101
      bind-hostname = 0.0.0.0
      bind-port = 6101
    }
  }

  cluster {
    metrics.collector.sample-interval = 2s
    roles = [pipeline]
  }
}